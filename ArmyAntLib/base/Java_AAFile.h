/*  
 * Copyright (c) 2015 ArmyAnt
 * 版权所有 (c) 2015 ArmyAnt
 *
 * Licensed under the BSD License, Version 2.0 (the License); 
 * 本软件使用BSD协议保护, 协议版本:2.0
 * you may not use this file except in compliance with the License. 
 * 使用本开源代码文件的内容, 视为同意协议
 * You can read the license content in the file "ARMYANT.COPYRIGHT.BSD_LICENSE.MD" at the root of this project
 * 您可以在本项目的根目录找到名为"ARMYANT.COPYRIGHT.BSD_LICENSE.MD"的文件, 来阅读协议内容
 * You may also obtain a copy of the License at 
 * 您也可以在此处获得协议的副本:
 * 
 *     http://opensource.org/licenses/BSD-3-Clause
 * 
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an AS IS BASIS, 
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 * 除非法律要求或者版权所有者书面同意,本软件在本协议基础上的发布没有任何形式的条件和担保,无论明示的或默许的.
 * See the License for the specific language governing permissions and limitations under the License. 
 * 请在特定限制或语言管理权限下阅读协议
 * This file is the internal source file of this project, is not contained by the closed source release part of this software
 * 本文件为内部源码文件, 不会包含在闭源发布的本软件中
 */

/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class ArmyAnt_Java_AAFile 
	Java 类 ArmyAnt.Java_AAFile的C头文件
*/

#ifndef _Included_ArmyAnt_Java_AAFile_2016_2_23
#define _Included_ArmyAnt_Java_AAFile_2016_2_23
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     ArmyAnt_Java_AAFile
 * Method:    Native_Create
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_ArmyAnt_Java_1AAFile_Native_1Create
  (JNIEnv *, jclass);

/*
 * Class:     ArmyAnt_Java_AAFile
 * Method:    Native_Release
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_ArmyAnt_Java_1AAFile_Native_1Release
  (JNIEnv *, jclass, jlong stream);

/*
 * Class:     ArmyAnt_Java_AAFile
 * Method:    Native_SetMode
 * Signature: (JZZ)Z
 */
JNIEXPORT jboolean JNICALL Java_ArmyAnt_Java_1AAFile_Native_1SetMode
  (JNIEnv *, jclass, jlong stream, jboolean nocreate, jboolean noexist);

/*
 * Class:     ArmyAnt_Java_AAFile
 * Method:    Native_OpenFile
 * Signature: (JLjava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_ArmyAnt_Java_1AAFile_Native_1OpenFile
  (JNIEnv *, jclass, jlong stream, jstring filename);

/*
 * Class:     ArmyAnt_Java_AAFile
 * Method:    Native_OpenMemoryByAddr
 * Signature: (JJI)Z
 */
JNIEXPORT jboolean JNICALL Java_ArmyAnt_Java_1AAFile_Native_1OpenMemoryByAddr
  (JNIEnv *, jclass, jlong stream, jlong memaddr, jint len);

/*
 * Class:     ArmyAnt_Java_AAFile
 * Method:    Native_OpenNamePipe
 * Signature: (JLjava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_ArmyAnt_Java_1AAFile_Native_1OpenNamePipe
  (JNIEnv *, jclass, jlong stream, jstring pipename, jstring pipepath, jstring pipeserver);

/*
 * Class:     ArmyAnt_Java_AAFile
 * Method:    Native_OpenCom
 * Signature: (JS)Z
 */
JNIEXPORT jboolean JNICALL Java_ArmyAnt_Java_1AAFile_Native_1OpenCom
  (JNIEnv *, jclass, jlong stream, jshort comNum);

/*
 * Class:     ArmyAnt_Java_AAFile
 * Method:    Native_OpenNetWithName
 * Signature: (JLjava/lang/String;S)Z
 */
JNIEXPORT jboolean JNICALL Java_ArmyAnt_Java_1AAFile_Native_1OpenNetWithName
  (JNIEnv *, jclass, jlong stream, jstring netAddr, jshort protocol);

/*
 * Class:     ArmyAnt_Java_AAFile
 * Method:    Native_OpenNetWithAddr
 * Signature: (JJIS)Z
 */
JNIEXPORT jboolean JNICALL Java_ArmyAnt_Java_1AAFile_Native_1OpenNetWithAddr
  (JNIEnv *, jclass, jlong stream, jlong netIp, jint port, jshort protocol);

/*
 * Class:     ArmyAnt_Java_AAFile
 * Method:    Native_Close
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_ArmyAnt_Java_1AAFile_Native_1Close
  (JNIEnv *, jclass, jlong stream);

/*
 * Class:     ArmyAnt_Java_AAFile
 * Method:    Native_IsOpened
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_ArmyAnt_Java_1AAFile_Native_1IsOpened
  (JNIEnv *, jclass, jlong stream);

/*
 * Class:     ArmyAnt_Java_AAFile
 * Method:    Native_NowType
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_ArmyAnt_Java_1AAFile_Native_1NowType
  (JNIEnv *, jclass, jlong stream);

/*
 * Class:     ArmyAnt_Java_AAFile
 * Method:    Native_GetLength
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_ArmyAnt_Java_1AAFile_Native_1GetLength
  (JNIEnv *, jclass, jlong stream);

/*
 * Class:     ArmyAnt_Java_AAFile
 * Method:    Native_GetPos
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_ArmyAnt_Java_1AAFile_Native_1GetPos
  (JNIEnv *, jclass, jlong stream);

/*
 * Class:     ArmyAnt_Java_AAFile
 * Method:    Native_IsEndPos
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_ArmyAnt_Java_1AAFile_Native_1IsEndPos
  (JNIEnv *, jclass, jlong stream);

/*
 * Class:     ArmyAnt_Java_AAFile
 * Method:    Native_MovePos
 * Signature: (JJ)Z
 */
JNIEXPORT jboolean JNICALL Java_ArmyAnt_Java_1AAFile_Native_1MovePos
  (JNIEnv *, jclass, jlong stream, jlong pos);

/*
 * Class:     ArmyAnt_Java_AAFile
 * Method:    Native_GetStreamName
 * Signature: (J)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_ArmyAnt_Java_1AAFile_Native_1GetStreamName
  (JNIEnv *, jclass, jlong stream);

/*
 * Class:     ArmyAnt_Java_AAFile
 * Method:    Native_ReadSome
 * Signature: (J[BJ)J
 */
JNIEXPORT jlong JNICALL Java_ArmyAnt_Java_1AAFile_Native_1ReadSome
  (JNIEnv *, jclass, jlong stream, jbyteArray buffer, jlong pos, jlong len);

/*
 * Class:     ArmyAnt_Java_AAFile
 * Method:    Native_ReadTo
 * Signature: (J[BS)J
 */
JNIEXPORT jlong JNICALL Java_ArmyAnt_Java_1AAFile_Native_1ReadTo
  (JNIEnv *, jclass, jlong stream, jbyteArray buffer, jshort endtag, jlong maxlen);

/*
 * Class:     ArmyAnt_Java_AAFile
 * Method:    Native_Write
 * Signature: (J[B)J
 */
JNIEXPORT jlong JNICALL Java_ArmyAnt_Java_1AAFile_Native_1Write
  (JNIEnv *, jclass, jlong stream, jbyteArray buffer, jlong len);

/*
 * Class:     ArmyAnt_Java_AAFile
 * Method:    Native_CopyFile
 * Signature: (Ljava/lang/String;Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_ArmyAnt_Java_1AAFile_Native_1CopyFile
  (JNIEnv *, jclass, jstring srcPath, jstring dstPath);

/*
 * Class:     ArmyAnt_Java_AAFile
 * Method:    Native_MoveOrRenameFile
 * Signature: (Ljava/lang/String;Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_ArmyAnt_Java_1AAFile_Native_1MoveOrRenameFile
  (JNIEnv *, jclass, jstring srcPath, jstring dstPath);

/*
 * Class:     ArmyAnt_Java_AAFile
 * Method:    Native_DeleteFile
 * Signature: (Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_ArmyAnt_Java_1AAFile_Native_1DeleteFile
  (JNIEnv *, jclass, jstring path);

/*
 * Class:     ArmyAnt_Java_AAFile
 * Method:    Native_IsFileExist
 * Signature: (Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_ArmyAnt_Java_1AAFile_Native_1IsFileExist
  (JNIEnv *, jclass, jstring path);

#ifdef __cplusplus
} // extern "C"
#endif
#endif // _Included_ArmyAnt_Java_AAFile_2016_2_23
