/*  
 * Copyright (c) 2015 ArmyAnt
 * 版权所有 (c) 2015 ArmyAnt
 *
 * Licensed under the BSD License, Version 2.0 (the License); 
 * 本软件使用BSD协议保护, 协议版本:2.0
 * you may not use this file except in compliance with the License. 
 * 使用本开源代码文件的内容, 视为同意协议
 * You can read the license content in the file "ARMYANT.COPYRIGHT.BSD_LICENSE.MD" at the root of this project
 * 您可以在本项目的根目录找到名为"ARMYANT.COPYRIGHT.BSD_LICENSE.MD"的文件, 来阅读协议内容
 * You may also obtain a copy of the License at 
 * 您也可以在此处获得协议的副本:
 * 
 *     http://opensource.org/licenses/BSD-3-Clause
 * 
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an AS IS BASIS, 
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 * 除非法律要求或者版权所有者书面同意,本软件在本协议基础上的发布没有任何形式的条件和担保,无论明示的或默许的.
 * See the License for the specific language governing permissions and limitations under the License. 
 * 请在特定限制或语言管理权限下阅读协议
 * This file is the internal source file of this project, is not contained by the closed source release part of this software
 * 本文件为内部源码文件, 不会包含在闭源发布的本软件中
 */

/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class ArmyAnt_Java_AANeuron 
	Java 类 ArmyAnt.Java_AANeuron的C头文件
*/

#ifndef _Included_ArmyAnt_Java_AANeuron_2016_2_24
#define _Included_ArmyAnt_Java_AANeuron_2016_2_24
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     ArmyAnt_Java_AANeuron
 * Method:    Liner
 * Signature: (DDD)D
 */
JNIEXPORT jdouble JNICALL Java_ArmyAnt_Java_1AANeuron_Liner
  (JNIEnv *, jclass, jdouble input, jdouble slope, jdouble bias);

/*
 * Class:     ArmyAnt_Java_AANeuron
 * Method:    Ramp
 * Signature: (DDD)D
 */
JNIEXPORT jdouble JNICALL Java_ArmyAnt_Java_1AANeuron_Ramp
  (JNIEnv *, jclass, jdouble input, jdouble width, jdouble height);

/*
 * Class:     ArmyAnt_Java_AANeuron
 * Method:    Threshold
 * Signature: (DDD)D
 */
JNIEXPORT jdouble JNICALL Java_ArmyAnt_Java_1AANeuron_Threshold
  (JNIEnv *, jclass, jdouble input, jdouble amplitude, jdouble threshold);

/*
 * Class:     ArmyAnt_Java_AANeuron
 * Method:    Sigmoid
 * Signature: (DD)D
 */
JNIEXPORT jdouble JNICALL Java_ArmyAnt_Java_1AANeuron_Sigmoid
  (JNIEnv *, jclass, jdouble input, jdouble coef);

/*
 * Class:     ArmyAnt_Java_AANeuron
 * Method:    DoubleSigmoid
 * Signature: (DD)D
 */
JNIEXPORT jdouble JNICALL Java_ArmyAnt_Java_1AANeuron_DoubleSigmoid
  (JNIEnv *, jclass, jdouble input, jdouble coef);

/*
 * Class:     ArmyAnt_Java_AANeuron
 * Method:    Native_Create
 * Signature: (LArmyAnt/Java_AANeuron/INeuronActive;D)J
 */
JNIEXPORT jlong JNICALL Java_ArmyAnt_Java_1AANeuron_Native_1Create
  (JNIEnv *, jclass, jobject funcInterface, jdouble threshold);

/*
 * Class:     ArmyAnt_Java_AANeuron
 * Method:    Native_Clone
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_ArmyAnt_Java_1AANeuron_Native_1Clone
  (JNIEnv *, jclass, jlong value);

/*
 * Class:     ArmyAnt_Java_AANeuron
 * Method:    Native_Release
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_ArmyAnt_Java_1AANeuron_Native_1Release
  (JNIEnv *, jclass, jlong value);

/*
 * Class:     ArmyAnt_Java_AANeuron
 * Method:    Native_JoinActive
 * Signature: (JDD)Z
 */
JNIEXPORT jboolean JNICALL Java_ArmyAnt_Java_1AANeuron_Native_1JoinActive
  (JNIEnv *, jclass, jlong value, jdouble input, jdouble weight);

/*
 * Class:     ArmyAnt_Java_AANeuron
 * Method:    Native_LeaveActive
 * Signature: (JDD)Z
 */
JNIEXPORT jboolean JNICALL Java_ArmyAnt_Java_1AANeuron_Native_1LeaveActive
  (JNIEnv *, jclass, jlong value, jdouble input, jdouble weight);

/*
 * Class:     ArmyAnt_Java_AANeuron
 * Method:    Native_ClearActive
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_ArmyAnt_Java_1AANeuron_Native_1ClearActive
  (JNIEnv *, jclass, jlong value);

/*
 * Class:     ArmyAnt_Java_AANeuron
 * Method:    Native_GetOutput
 * Signature: (J)D
 */
JNIEXPORT jdouble JNICALL Java_ArmyAnt_Java_1AANeuron_Native_1GetOutput
  (JNIEnv *, jclass, jlong value);

/*
 * Class:     ArmyAnt_Java_AANeuron
 * Method:    Native_GetAllActive
 * Signature: (J)D
 */
JNIEXPORT jdouble JNICALL Java_ArmyAnt_Java_1AANeuron_Native_1GetAllActive
  (JNIEnv *, jclass, jlong value);

/*
 * Class:     ArmyAnt_Java_AANeuron
 * Method:    Native_SetActiveInterface
 * Signature: (JLArmyAnt/Java_AANeuron/INeuronActive;)Z
 */
JNIEXPORT jboolean JNICALL Java_ArmyAnt_Java_1AANeuron_Native_1SetActiveInterface
  (JNIEnv *, jclass, jlong value, jobject funcInterface);

/*
 * Class:     ArmyAnt_Java_AANeuron
 * Method:    Native_GetThreshold
 * Signature: (J)D
 */
JNIEXPORT jdouble JNICALL Java_ArmyAnt_Java_1AANeuron_Native_1GetThreshold
  (JNIEnv *, jclass, jlong value);

/*
 * Class:     ArmyAnt_Java_AANeuron
 * Method:    Native_SetThreshold
 * Signature: (JD)Z
 */
JNIEXPORT jboolean JNICALL Java_ArmyAnt_Java_1AANeuron_Native_1SetThreshold
  (JNIEnv *, jclass, jlong value, jdouble threshold);

#ifdef __cplusplus
}
#endif

#endif // _Included_ArmyAnt_Java_AANeuron_2016_2_24
